{"uid":"bfba8ee24d19a7c0","name":"分类功能随机抽取验证--","fullName":"case_floor.aaaaa#test_03_login","historyId":"690c97446d1e6761e8fbf8fddd9530b1","time":{"start":1752030211080,"stop":1752030238875,"duration":27795},"status":"broken","statusMessage":"selenium.common.exceptions.WebDriverException: Message: An unknown server-side error occurred while processing the command. Original error: Cannot start the 'com.dragon.read' application. Visit https://github.com/appium/appium/blob/master/docs/en/writing-running-appium/android/activity-startup.md for troubleshooting. Original error: Error executing adbExec. Original error: 'Command 'D:\\\\apps\\\\androidsdk\\\\platform-tools\\\\adb.exe -P 5037 -s emulator-5554 shell am start -W -n com.dragon.read/com.dragon.read.pages.splash.SplashActivity -S' timed out after 20000ms'. Try to increase the 20000ms adb execution timeout represented by 'adbExecTimeout' capability\nStacktrace:\nUnknownError: An unknown server-side error occurred while processing the command. Original error: Cannot start the 'com.dragon.read' application. Visit https://github.com/appium/appium/blob/master/docs/en/writing-running-appium/android/activity-startup.md for troubleshooting. Original error: Error executing adbExec. Original error: 'Command 'D:\\\\apps\\\\androidsdk\\\\platform-tools\\\\adb.exe -P 5037 -s emulator-5554 shell am start -W -n com.dragon.read/com.dragon.read.pages.splash.SplashActivity -S' timed out after 20000ms'. Try to increase the 20000ms adb execution timeout represented by 'adbExecTimeout' capability\n    at getResponseForW3CError (C:\\Users\\nakex\\AppData\\Local\\Programs\\Appium\\resources\\app\\node_modules\\appium\\node_modules\\appium-base-driver\\lib\\protocol\\errors.js:804:9)\n    at asyncHandler (C:\\Users\\nakex\\AppData\\Local\\Programs\\Appium\\resources\\app\\node_modules\\appium\\node_modules\\appium-base-driver\\lib\\protocol\\protocol.js:388:37)\n    at process._tickCallback (internal/process/next_tick.js:68:7)","statusTrace":"case_name = '分类功能随机抽取验证--'\n\n    @allure.epic(\"番茄免费小说书籍获取与查找功能测试报告\")\n    @allure.feature(\"分类功能\")\n    @pytest.mark.parametrize(\"case_name\",[(\"分类功能随机抽取验证--\")])\n    def test_03_login(case_name):\n        allure.dynamic.title(case_name)\n>       driver = webdriver.Remote('http://127.0.0.1:4723/wd/hub', desired_caps)\n\n..\\case_floor\\aaaaa.py:133: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nD:\\apps\\python\\lib\\site-packages\\appium\\webdriver\\webdriver.py:259: in __init__\n    options=dst_options,\nD:\\apps\\python\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:206: in __init__\n    self.start_session(capabilities)\nD:\\apps\\python\\lib\\site-packages\\appium\\webdriver\\webdriver.py:346: in start_session\n    response = self.execute(RemoteCommand.NEW_SESSION, w3c_caps)\nD:\\apps\\python\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:345: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x000001D83AA76C48>\nresponse = {'status': 500, 'value': '{\"value\":{\"error\":\"unknown error\",\"message\":\"An unknown server-side error occurred while pro...iver\\\\\\\\lib\\\\\\\\protocol\\\\\\\\protocol.js:388:37)\\\\n    at process._tickCallback (internal/process/next_tick.js:68:7)\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.WebDriverException: Message: An unknown server-side error occurred while processing the command. Original error: Cannot start the 'com.dragon.read' application. Visit https://github.com/appium/appium/blob/master/docs/en/writing-running-appium/android/activity-startup.md for troubleshooting. Original error: Error executing adbExec. Original error: 'Command 'D:\\\\apps\\\\androidsdk\\\\platform-tools\\\\adb.exe -P 5037 -s emulator-5554 shell am start -W -n com.dragon.read/com.dragon.read.pages.splash.SplashActivity -S' timed out after 20000ms'. Try to increase the 20000ms adb execution timeout represented by 'adbExecTimeout' capability\nE       Stacktrace:\nE       UnknownError: An unknown server-side error occurred while processing the command. Original error: Cannot start the 'com.dragon.read' application. Visit https://github.com/appium/appium/blob/master/docs/en/writing-running-appium/android/activity-startup.md for troubleshooting. Original error: Error executing adbExec. Original error: 'Command 'D:\\\\apps\\\\androidsdk\\\\platform-tools\\\\adb.exe -P 5037 -s emulator-5554 shell am start -W -n com.dragon.read/com.dragon.read.pages.splash.SplashActivity -S' timed out after 20000ms'. Try to increase the 20000ms adb execution timeout represented by 'adbExecTimeout' capability\nE           at getResponseForW3CError (C:\\Users\\nakex\\AppData\\Local\\Programs\\Appium\\resources\\app\\node_modules\\appium\\node_modules\\appium-base-driver\\lib\\protocol\\errors.js:804:9)\nE           at asyncHandler (C:\\Users\\nakex\\AppData\\Local\\Programs\\Appium\\resources\\app\\node_modules\\appium\\node_modules\\appium-base-driver\\lib\\protocol\\protocol.js:388:37)\nE           at process._tickCallback (internal/process/next_tick.js:68:7)\n\nD:\\apps\\python\\lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:229: WebDriverException","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[],"afterStages":[],"labels":[{"name":"epic","value":"番茄免费小说书籍获取与查找功能测试报告"},{"name":"feature","value":"分类功能"},{"name":"parentSuite","value":"case_floor"},{"name":"suite","value":"aaaaa"},{"name":"host","value":"nkxf"},{"name":"thread","value":"19864-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"case_floor.aaaaa"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"case_name","value":"'分类功能随机抽取验证--'"}],"links":[],"hidden":true,"retry":true,"extra":{"categories":[],"tags":[]},"source":"bfba8ee24d19a7c0.json","parameterValues":["'分类功能随机抽取验证--'"]}